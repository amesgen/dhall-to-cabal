cabal-version:      2.4

name:               dhall-to-cabal
version:            1.3.4.0
license:            MIT
license-file:       LICENSE
maintainer:         ollie@ocharles.org.uk
author:             Ollie Charles <ollie@ocharles.org.uk>
homepage:           https://github.com/ocharles/dhall-to-cabal
bug-reports:        https://github.com/ocharles/dhall-to-cabal/issues
synopsis:           Compile Dhall expressions to Cabal files
description:
    dhall-to-cabal takes Dhall expressions and compiles them into Cabal
    files. All of the features of Dhall are supported, such as let
    bindings and imports, and all features of Cabal are supported
    (including conditional stanzas).
    .

category:           Distribution
build-type:         Simple
extra-source-files:
    Changelog.md
    README.md
    dhall/**/*.dhall
    golden-tests/dhall-to-cabal/*.dhall
    golden-tests/dhall-to-cabal/*.cabal
    golden-tests/cabal-to-dhall/*.dhall
    golden-tests/cabal-to-dhall/*.cabal

source-repository head
    type:     git
    location: https://github.com/ocharles/dhall-to-cabal

common commons
    default-language: Haskell2010
    ghc-options:
        -Wall -Wincomplete-record-updates -Wincomplete-uni-patterns
        -Wredundant-constraints -Wunused-packages -Wwarn=unused-packages
        -fhide-source-paths -fno-warn-name-shadowing
    default-extensions:
        ApplicativeDo GADTs GeneralizedNewtypeDeriving LambdaCase
        FlexibleContexts ScopedTypeVariables RankNTypes
        NamedFieldPuns OverloadedStrings RecordWildCards TypeApplications

library
    import: commons

    exposed-modules:
        CabalToDhall
        DhallLocation
        DhallToCabal
        DhallToCabal.FactorType
        DhallToCabal.Util

    hs-source-dirs:   lib
    other-modules:
        DhallToCabal.ConfigTree
        DhallToCabal.Diff
        Dhall.Extra
        Paths_dhall_to_cabal

    autogen-modules:  Paths_dhall_to_cabal

    build-depends:
        base,
        dhall >= 1.37.1,
        Cabal >= 3.2,
        bytestring,
        containers,
        either,
        contravariant,
        filepath,
        microlens,
        text,
        transformers,
        vector

executable dhall-to-cabal
    import: commons
    main-is:          Main.hs
    hs-source-dirs:   exe
    other-modules:    Paths_dhall_to_cabal
    autogen-modules:  Paths_dhall_to_cabal
    default-language: Haskell2010

    build-depends:
        base,
        dhall,
        Cabal,
        containers,
        dhall-to-cabal,
        directory,
        filepath,
        microlens,
        optparse-applicative,
        prettyprinter,
        text,
        transformers

executable cabal-to-dhall
    import: commons
    main-is:          Main.hs
    hs-source-dirs:   cabal-to-dhall
    other-modules:    Paths_dhall_to_cabal
    autogen-modules:  Paths_dhall_to_cabal

    build-depends:
        base,
        dhall,
        bytestring,
        dhall-to-cabal,
        optparse-applicative,
        prettyprinter,
        text

executable dhall-to-cabal-meta
    import: commons
    main-is:          Main.hs
    scope:            private
    hs-source-dirs:   meta

    build-depends:
        base,
        dhall,
        directory,
        dhall-to-cabal,
        filepath,
        optparse-applicative,
        prettyprinter

test-suite golden-tests
    import: commons
    type:             exitcode-stdio-1.0
    main-is:          GoldenTests.hs
    hs-source-dirs:   golden-tests

    build-depends:
        base,
        dhall,
        Cabal,
        Diff,
        bytestring,
        dhall-to-cabal,
        filepath,
        microlens,
        prettyprinter,
        tasty,
        tasty-golden,
        text

test-suite unit-tests
    import: commons
    type:             exitcode-stdio-1.0
    main-is:          Tests.hs
    hs-source-dirs:   tests
    other-modules:    DhallToCabal.Tests

    build-depends:
        base,
        dhall,
        Cabal,
        dhall-to-cabal,
        tasty,
        tasty-hunit,
        text
